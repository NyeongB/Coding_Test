코딩 테스트 유용한 팁
사용언어 : JAVA

-- 문자형으로된 숫자 int형으로 변환
char ch ='9';

int num = ch - '0';

- 문자열 자르기
str.split("");

- 문자열에서 특정인덱스 문자 가져오기
str.charAt(index);

- 서브스트링 
str.substring(1);	// 인덱스 1부분부터 끝까지

str.substring(2,2); // 인덱스 2부터 문자 2개 

- 문자열 전체 대문자, 소문자로 바꾸기
str.toLowerCase();
str.toUpperCase();

- 문자 대소문자 판별
Character.isLowerCase('a');	→ true
Character.isUpperCase('b'); → false

- 오름차순, 내림차순 정렬, String 배열 나누기, 합치기
		
String [] str = "bcead".split("");
		
// 오름차순 정렬
Arrays.sort(str);

// 내림차순 정렬(정렬이되어있어야 가능)
Collections.reverse(Arrays.asList(str));

// String 배열 다시 합치기 
String result = String.join("", str);

-- 2차원 배열의 크기 
int [][] arr = new int[2][4];	// 전부 0으로 초기화된다.

행의 갯수 : arr.length;
열의 갯수 : arr[0].length;

-- indexOf안에 String 형 통채로 들어가는것도 가능 
String [] str = {"119","97674223","01195524421"};
		
System.out.println(str[2].indexOf(str[0]));		

-- 내림차순 정렬 
Integer[] numbers = {5,2,8,10,6,9};

Arrays.sort(numbers, Collections.reverseOrder());

-- 향상된 for문
for(int n : arr)
			System.out.println(n);
			
---------------------------------------------------------
// 해시맵
public static void main(String[] args)
	{
		int [] arr = new int[10];
		
		for(int i=0; i<arr.length; i++)
			arr[i] = i+1;
		
		for(int n : arr)
			System.out.println(n);
		
		HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
		
		for(int n : arr)
		{
			hm.put(n,1);
		}
		
		for(int n : arr)
		{
			if(hm.get(n)!=null)
				System.out.println("Key : "+n+" Value :" + hm.get(n));
		}
		
		for(int n : hm.keySet()) // 키값들 반환함
		{
			System.out.println(n);
		}
	}
	
	// hm.containsKey(element) 포함되어있는 여부 확인 
	// hm.remove(element) 해당 키에 맞는 밸류 제거 
	
---------------------------------------------------------

String [] str = s.split("\\+"); 문자를 기준으로 자를려면 \\이 붙어있어야한다.

-----------------------------------------------------------

Tree Traveling

Preorder : root - left - right
Inorder : left - root - right
Postorder : left - right - root

---------------------------------------------------------

진법 변환 내장함수 
int i = 127;
 
String binaryString = Integer.toBinaryString(i); //2진수
String octalString = Integer.toOctalString(i);   //8진수
String hexString = Integer.toHexString(i);       //16진수
 
System.out.println(binaryString); //1111111
System.out.println(octalString);  //177
System.out.println(hexString);    //7f

---------------------------------------------------------

자리수 끼워 맞추기
 str1 = String.format("%" + 5 + "s", "101");
		 
 System.out.println(str1.replaceAll(" ", "0")); // 00101
 
 ---------------------------------------------------------
 문자 정수판단 
 Character.isDigit(ch)
 
 ----------------------------------------------------------
 Integer.bitCount(n); 비트 카운트 
 
 ---------------------------------------------------------
 거꾸로 출력 
StringBuffer sb = new StringBuffer();
		
		
		sb.append("abcdef");
		
		String temp = sb.reverse().toString();
		
		System.out.println(temp);
--------------------------------------------------------		
진법 변환 
		int n = 125;
		String answer = "";
		while(n>0)
		{
			int r = n%2;
			n = n/2;
			
			
			answer = r + answer;
			
		}
		
		System.out.println(answer);
		
-------------------------------------------------------------
우선 순위 큐 

힙 정렬이 되서 들어가짐 
순서를 바꿔서 선언할수도있음 
Queue<Integer> q = new PriorityQueue<Integer>(Collections.reverseOrder());
		
		q.offer(5);
		q.offer(2);
		q.offer(3);
		q.offer(1);
		q.offer(2);
		q.offer(3);
		q.offer(5);
		q.offer(1);
		
		int len = q.size();
		for(int i=0; i<len; i++)
			System.out.println(q.poll());
----------------------------------------------------------------------			
2의 거듭제곱 판별법 

(num&(num-1)) == 0 이면 2의 거듭제곱 		2, 4, 6, 8, 16, 32... 

-----------------------------------------------------------------------
dfs bfs 문제 구분

깊이 우선 탐색(DFS)과 너비 우선 탐색(BFS) 활용한 문제 유형/응용
DFS, BFS은 특징에 따라 사용에 더 적합한 문제 유형들이 있습니다.
1) 그래프의 모든 정점을 방문하는 것이 주요한 문제
단순히 모든 정점을 방문하는 것이 중요한 문제의 경우 DFS, BFS 두 가지 방법 중 어느 것을 사용하셔도 상관없습니다.
둘 중 편한 것을 사용하시면 됩니다.

2) 경로의 특징을 저장해둬야 하는 문제
예를 들면 각 정점에 숫자가 적혀있고 a부터 b까지 가는 경로를 구하는데 경로에 같은 숫자가 있으면 안 된다는 문제 등,
 각각의 경로마다 특징을 저장해둬야 할 때는 DFS를 사용합니다. (BFS는 경로의 특징을 가지지 못합니다)

3) 최단거리 구해야 하는 문제
미로 찾기 등 최단거리를 구해야 할 경우, BFS가 유리합니다.
왜냐하면 깊이 우선 탐색으로 경로를 검색할 경우 처음으로 발견되는 해답이 최단거리가 아닐 수 있지만, 
너비 우선 탐색으로 현재 노드에서 가까운 곳부터 찾기 때문에경로를 탐색 시 먼저 찾아지는 해답이 곧 최단거리기 때문입니다.

이밖에도 

- 검색 대상 그래프가 정말 크다면 DFS를 고려
- 검색대상의 규모가 크지 않고, 검색 시작 지점으로부터 원하는 대상이 별로 멀지 않다면 BFS

 